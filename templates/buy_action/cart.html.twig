{% extends 'base.html.twig' %}

{% block title %}Shopping cart{% endblock %}

{% block body %}
    <div class="wrapper_cart">
        <h1>{% trans %}Shopping Cart{% endtrans %}</h1>
        <div class="project">
            <div class="shop">
                {% if cart.detailCart|length > 0 %}
                {% for key, item in cart.detailCart %}
                    <div class="box_article">
                        <img src="{{ asset('images/products/' ~ item.product.image) }}" alt="{{ item.product.shortcut }}">
                        <div class="content_article">
                            <h3>{{ item['product'].title }}</h3>
                            <h4 class="mb-10">
                                {{ item ['total'] }} €
                            </h4>
                            <label class="qty">{% trans %}Quantity {% endtrans %}: x</label>
                            <input aria-label="Quantity" id="updateQuantity{{ key }}" type="number" value="{{ item ['quantity'] }}">
                            <button onclick="onUpdateButton('{{ path('modify_quantity') }}', {{ item.product.id }}, 'updateQuantity{{ key }}')"
                                    aria-label="update" class="update">{% trans %}UPDATE{% endtrans %}
                            </button>
                            <button onclick="onDeleteButton('{{ path('delete_product') }}', {{ item.product.id }})" aria-label="remove" class="remove">
                                {% trans %}REMOVE{% endtrans %}
                            </button>
                        </div>
                    </div>
                {% endfor %}
                {% else %}
                    <hr>
                    <h4 class="mt-20">{% trans %}Your cart is empty !{% endtrans %}</h4>
                {% endif %}
            </div>
            {# COTE DROIT DU PANIER #}
            <div class="col ml-20">
            <div class="right_bar">
                <p><span>{% trans %}Subtotal{% endtrans %}</span> <span> {{ cart.totalCart }} €</span></p>
                <hr>
                {{ form_start(form)  }}
                    {{ form_row(form.couponCode) }}
                    {{ form_row(form.submit) }}
                {{ form_end(form) }}
                {% if voucher is not null %}
                    <p class="codeValid">{{ voucher.name}} -{{ voucher.discount }}% </p>
                {% endif %}
                {% if errorCode is not null %}
                <p class="codeWrong">{{ errorCode }}</p>
                {% endif %}
                <hr>

                {% if voucher is null %}
                <p class="total_price"><span>{% trans %}TOTAL{% endtrans %}</span> <span>{{ cart.totalCart }} €</span></p>
                {% else %}
                    <p class="total_price"><span>{% trans %}TOTAL{% endtrans %}</span> <span>{{ cart.totalCart - (cart.totalCart * voucher.discount / 100) }}€</span></p>
                {% endif %}
                <a class="button" href="{{ path('choose_address_cart') }}">{% trans %}Checkout{% endtrans %}</a>
            </div>
            <button class="button_delete mt-20" onclick="onDeleteCart('{{ path('delete_cart') }}')">{% trans %}DELETE CART{% endtrans %}</button>
            </div>
        </div>
    </div>


    {% block footer %}
        {% include 'footer.html.twig' %}
    {% endblock %}
    <script>
        function onUpdateButton(url, idProduct, idInput) {
            const quantity = document.getElementById(idInput).value
            fetch(url, {
                method: "POST",
                body: JSON.stringify({
                    'idProduct': idProduct,
                    'quantity': quantity
                })
                // /!\ pour apres récupérer la réponse du serveur pour actualiser la page
                // La méthode fetch() renvoie une promesse (Promise), ce qui me permets d'utiliser les méthodes then() ou catch() pour la gérer.
                // Lorsque la requête est terminée, la ressource est disponible. À ce moment-là, la promesse sera résolue en un objet réponse (Response).
                // L'objet Response est l'enveloppe/le container de l'API pour la ressource récupérée.
            }).then(() => {
                location.reload()
            })
        }

        function onDeleteButton(url, idProduct) {
            fetch(url, {
                method: "POST",
                body: JSON.stringify({
                    'idProduct': idProduct,
                })
            }).then(() => {
                location.reload()
            })
        }

        function onDeleteCart(url){
            fetch(url, {
                method:"POST",
            }).then(() => {
                location.reload()
            })
        }

        function onVoucherApply(url){
            fetch(url, {
                method:"POST",

            }).then(() => {
                location.reload()
            })
        }

    </script>
{% endblock %}