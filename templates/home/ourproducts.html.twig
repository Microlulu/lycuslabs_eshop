{% extends 'base.html.twig' %}

{% block title %}Product{% endblock %}

{% block body %}

    <div class="small-container single-product pt-50">
        <div class="product_container">
            <div class="product_info">
                <div class="col-2 imgs_box">
                    <div class="imgProd_Box">
                        <img src="{{ asset('images/products/' ~ product.image ) }}"
                             alt="{{ product.shortcut }}" id="{{ asset('images/products/' ~ product.image ) }}">
                    </div>
                    <div class="small-img-row">
                        {% for image in product.imagesProducts %}
                        <div class="small-img-col">
                            <img id="{{ asset('images/products/' ~ image.image ) }}"  onclick="showImage('{{ asset('images/products/' ~ product.image ) }}','{{ asset('images/products/' ~ image.image ) }}')" src="{{ asset('images/products/' ~ image.image ) }}"
                                 alt="{{ image.alt }}" class="small-img">
                        </div>
                        {% endfor %}
                    </div>
                </div>
                <div class="col-2 txt_center">
                    <h1>{{ product.title }}</h1>
                    <h3>{% trans %}Description{% endtrans %}</h3>
                    <p class="mt-5 txt_justify">{{ product.description }}</p>
                    <br>
                    <h2 class="price_prod">{{ product.price }} €</h2>
                    <form id="formAddCart">
                        <label for="quantityProduct" class="qty">{% trans %}Quantity{% endtrans %}</label>
                        <input  type="number" id="quantityProduct" name="quantity" min="1" value="1">
                        <button type="submit" class="button" aria-label="Add to Cart" onclick="showConfirm();">{% trans %}ADD TO CART{% endtrans %}</button>
                    </form>
                    <div class="animation" id="popUp">
                        {% trans %}This product has been added to your cart!{% endtrans %}
                    </div>
                </div>
            </div>
            <div class="txt_center">
                <h3>{% trans %}Additional information{% endtrans %}</h3>
                <p class="mb-25 txt_justify">{{ product.descriptionadd }}</p>
            </div>
        </div>
    </div>
    {% block footer %}
        {% include 'footer.html.twig' %}
    {% endblock %}
    <script>
        /* FONCTION POUR AJOUTER AU PANIER + AJOUTER AVEC LA QUANTITE CHOISIE PAR L'UTILISATEUR */

        // Je recupère le formulaire de l'html par sont ID (#formAddCart) je lui mets un event listener
        // qui attends 2 paramètres (le submit et l'évenement)
        document.getElementById("formAddCart").addEventListener("submit",
            function (event) {
                console.log(document.getElementById("quantityProduct").value,
                    // J'utilise ensuite la méthode fetch() qui est disponible dans la portée globale et donne l'instruction aux navigateurs web d'envoyer une requête à une URL.
                    // Faire un Fetch me permettra de demander une ressource de manière asynchrone (désynchronisé/qui ne suit pas le mouvement/la vitesse imposé)
                    // Utilisez la méthode fetch() sert a renvoyer une promesse qui se résout en un objet Response.
                    //La méthode fetch() ne requiert qu'un seul paramètre, à savoir l'URL de la ressource que je souhaite récupérer (en l'occurance la méthode : Path: AddToCart)
                    fetch("{{ path('AddToCart') }}", {
                        method: "POST",
                        body: JSON.stringify({
                            'quantity': document.getElementById("quantityProduct").value,
                            'idProduct': {{ product.id }}
                        })
                        // La méthode fetch() renvoie une promesse (Promise), ce qui me permets d'utiliser les méthodes then() ou catch() pour la gérer.
                        // Lorsque la requête est terminée, la ressource est disponible. À ce moment-là, la promesse sera résolue en un objet réponse (Response).
                        // L'objet Response est l'enveloppe/le container de l'API pour la ressource récupérée.
                    })//.then(response => {
                        // Pour obtenir les données réelles, il faut appelez l'une des méthodes de l'objet Response, par exemple text() ou json().
                        // Ces méthodes sont résolues dans les données réelles.
                       // return response.json()
                   // }).then(product => {
                       // console.log(product)
                   // })
                )
                event.preventDefault()
            })
    </script>

{% endblock %}