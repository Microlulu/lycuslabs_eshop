<?php

namespace App\Services\Stripe\StripeWebhooks\BrainWebhooks;

interface StripeEventListenerInterface
{
    public function account_updated($event);
    public function account_application_authorized($event);
    public function account_application_deauthorized($event);
    public function account_external_account_created($event);
    public function account_external_account_deleted($event);
    public function account_external_account_updated($event);
    public function application_fee_created($event);
    public function application_fee_refunded($event);
    public function application_fee_refund_updated($event);
    public function balance_available($event);
    public function capability_updated($event);
    public function charge_captured($event);
    public function charge_expired($event);
    public function charge_failed($event);
    public function charge_pending($event);
    public function charge_succeeded($event);
    public function charge_updated($event);
    public function charge_dispute_closed($event);
    public function charge_dispute_created($event);
    public function charge_dispute_funds_reinstated($event);
    public function charge_dispute_funds_withdrawn($event);
    public function charge_dispute_updated($event);
    public function charge_refund_updated($event);
    public function checkout_session_async_payment_failed($event);
    public function checkout_session_async_payment_succeeded($event);
    public function checkout_session_completed($event);
    public function coupon_created($event);
    public function coupon_deleted($event);
    public function coupon_updated($event);
    public function credit_note_created($event);
    public function credit_note_updated($event);
    public function credit_note_voided($event);
    public function customer_created($event);
    public function customer_deleted($event);
    public function customer_updated($event);
    public function customer_discount_created($event);
    public function customer_discount_deleted($event);
    public function customer_discount_updated($event);
    public function customer_source_created($event);
    public function customer_source_deleted($event);
    public function customer_source_expiring($event);
    public function customer_source_updated($event);
    public function customer_subscription_created($event);
    public function customer_subscription_deleted($event);
    public function customer_subscription_pending_update_applied($event);
    public function customer_subscription_pending_update_expired($event);
    public function customer_subscription_trial_will_end($event);
    public function customer_subscription_updated($event);
    public function customer_tax_id_created($event);
    public function customer_tax_id_deleted($event);
    public function customer_tax_id_updated($event);
    public function file_created($event);
    public function invoice_created($event);
    public function invoice_deleted($event);
    public function invoice_finalization_failed($event);
    public function invoice_finalized($event);
    public function invoice_marked_uncollectible($event);
    public function invoice_paid($event);
    public function invoice_payment_action_required($event);
    public function invoice_payment_failed($event);
    public function invoice_payment_succeeded($event);
    public function invoice_sent($event);
    public function invoice_upcoming($event);
    public function invoice_updated($event);
    public function invoice_voided($event);
    public function invoiceitem_created($event);
    public function invoiceitem_deleted($event);
    public function invoiceitem_updated($event);
    public function issuing_authorization_created($event);
    public function issuing_authorization_request($event);
    public function issuing_authorization_updated($event);
    public function issuing_card_created($event);
    public function issuing_card_updated($event);
    public function issuing_cardholder_created($event);
    public function issuing_cardholder_updated($event);
    public function issuing_dispute_closed($event);
    public function issuing_dispute_created($event);
    public function issuing_dispute_funds_reinstated($event);
    public function issuing_dispute_submitted($event);
    public function issuing_dispute_updated($event);
    public function issuing_transaction_created($event);
    public function issuing_transaction_updated($event);
    public function mandate_updated($event);
    public function order_created($event);
    public function order_payment_failed($event);
    public function order_payment_succeeded($event);
    public function order_updated($event);
    public function order_return_created($event);
    public function payment_intent_amount_capturable_updated($event);
    public function payment_intent_canceled($event);
    public function payment_intent_created($event);
    public function payment_intent_payment_failed($event);
    public function payment_intent_processing($event);
    public function payment_intent_requires_action($event);
    public function payment_intent_succeeded($event);
    public function payment_method_attached($event);
    public function payment_method_detached($event);
    public function payment_method_updated($event);
    public function payout_canceled($event);
    public function payout_created($event);
    public function payout_failed($event);
    public function payout_paid($event);
    public function payout_updated($event);
    public function person_created($event);
    public function person_deleted($event);
    public function person_updated($event);
    public function plan_created($event);
    public function plan_deleted($event);
    public function plan_updated($event);
    public function price_created($event);
    public function price_deleted($event);
    public function price_updated($event);
    public function product_created($event);
    public function product_deleted($event);
    public function product_updated($event);
    public function promotion_code_created($event);
    public function promotion_code_updated($event);
    public function radar_early_fraud_warning_created($event);
    public function radar_early_fraud_warning_updated($event);
    public function recipient_created($event);
    public function recipient_deleted($event);
    public function recipient_updated($event);
    public function reporting_report_run_failed($event);
    public function reporting_report_run_succeeded($event);
    public function reporting_report_type_updated($event);
    public function review_closed($event);
    public function review_opened($event);
    public function setup_intent_canceled($event);
    public function setup_intent_created($event);
    public function setup_intent_requires_action($event);
    public function setup_intent_setup_failed($event);
    public function setup_intent_succeeded($event);
    public function sigma_scheduled_query_run_created($event);
    public function sku_created($event);
    public function sku_deleted($event);
    public function sku_updated($event);
    public function source_canceled($event);
    public function source_chargeable($event);
    public function source_failed($event);
    public function source_mandate_notification($event);
    public function source_refund_attributes_required($event);
    public function source_transaction_created($event);
    public function source_transaction_updated($event);
    public function subscription_schedule_aborted($event);
    public function subscription_schedule_canceled($event);
    public function subscription_schedule_completed($event);
    public function subscription_schedule_created($event);
    public function subscription_schedule_expiring($event);
    public function subscription_schedule_released($event);
    public function subscription_schedule_updated($event);
    public function tax_rate_created($event);
    public function tax_rate_updated($event);
    public function topup_canceled($event);
    public function topup_created($event);
    public function topup_failed($event);
    public function topup_reversed($event);
    public function topup_succeeded($event);
    public function transfer_created($event);
    public function transfer_failed($event);
    public function transfer_paid($event);
    public function transfer_reversed($event);
    public function transfer_updated($event);
}
