<?php


namespace App\Services\Stripe\StripeWebhooks;

use App\Repository\MoneyPackRepository;
use App\Repository\OrdersRepository;
use App\Repository\UserRepository;
use App\Services\Mailing\Mailing;
use App\Services\Orders\Invoices;
use App\Services\PremiumDay\PremiumDayService;
use Doctrine\ORM\EntityManagerInterface;

class OverRidingWebhooks extends AbstractStripeEventListener
{
    private EntityManagerInterface $entityManager;
    private UserRepository $userRepository;
    private OrdersRepository $ordersRepository;
    private MoneyPackRepository $moneyPackRepository;
    private Invoices $invoices;
    private Mailing $mailing;
    private PremiumDayService $premiumDayService;

    /**
     * @param EntityManagerInterface $entityManager
     * @param UserRepository $userRepository
     * @param OrdersRepository $ordersRepository
     * @param MoneyPackRepository $moneyPackRepository
     */
    public function __construct(
        EntityManagerInterface $entityManager,
        UserRepository         $userRepository, OrdersRepository $ordersRepository,
        MoneyPackRepository    $moneyPackRepository, Invoices $invoices, Mailing $mailing,
        PremiumDayService      $premiumDayService)
    {
        $this->entityManager = $entityManager;
        $this->userRepository = $userRepository;
        $this->ordersRepository = $ordersRepository;
        $this->moneyPackRepository = $moneyPackRepository;
        $this->invoices = $invoices;
        $this->mailing = $mailing;
        $this->premiumDayService = $premiumDayService;
    }

    /**
     * @param $event
     * Event is webhook send by Stripe
     */
    public function payment_intent_succeeded($event)
    {
        //récupération des infos dans le webhook
        $eventData = $event->data->object;

        //récupération des entity's
        $order = $this->ordersRepository->findOneBy(['unique_id' => $eventData->metadata->order]);
        $user = $this->userRepository->findOneBy(['stripeId' => $eventData->customer]);
        $moneyPack = $this->moneyPackRepository->findOneBy(['id' => $eventData->metadata->product]);

        //ajouts des clefs
        $user->setOpeningKey($user->getOpeningKey() + $moneyPack->getOpeningKey());
        $user->setMasterKey($user->getMasterKey() + $moneyPack->getMasterKey());
        $user->setMagnifyingGlass($user->getMagnifyingGlass() + $moneyPack->getMagnifyingGlass());
        $user->setUserPremium(true);

        $this->premiumDayService->addPremiumDay($user, $moneyPack->getDayPremium());

        //changement du status de l'order
        $order->setStatus('PAYMENT_SUCCESS');


        $this->invoices->generateInvoice($user, $moneyPack, $order);
        $this->mailing->confirmOrder($user->getEmail(), $user->getUserDetails()->getPseudo(), $order);

        //Persist et flush
        $this->entityManager->persist($user);
        $this->entityManager->persist($order);

        $this->entityManager->flush();
    }

    public function charge_dispute_funds_withdrawn($event)
    {
        parent::charge_dispute_funds_withdrawn($event); // TODO: Change the autogenerated stub
    }


}
